#!/usr/bin/env node

/**
 * Firebase Setup Helper for KAYA
 * 
 * This interactive script helps you set up your Firebase configuration
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('\n🌿 Welcome to KAYA Firebase Setup\n');
  console.log('This wizard will help you configure Firebase for Bigpenger@gmail.com\n');
  
  console.log('First, make sure you have:');
  console.log('1. Created a Firebase project at https://console.firebase.google.com/');
  console.log('2. Enabled Authentication (Email/Password & Google)');
  console.log('3. Created a Firestore database');
  console.log('4. Enabled Storage\n');
  
  const ready = await question('Are you ready to continue? (yes/no): ');
  
  if (ready.toLowerCase() !== 'yes' && ready.toLowerCase() !== 'y') {
    console.log('\nNo problem! Complete the steps above and run this script again.');
    rl.close();
    return;
  }
  
  console.log('\n📋 Enter your Firebase configuration values');
  console.log('(Find these at: Firebase Console > Project Settings > Your apps > Web app)\n');
  
  const apiKey = await question('API Key: ');
  const authDomain = await question('Auth Domain (e.g., your-project.firebaseapp.com): ');
  const projectId = await question('Project ID: ');
  const storageBucket = await question('Storage Bucket (e.g., your-project.firebasestorage.app): ');
  const messagingSenderId = await question('Messaging Sender ID: ');
  const appId = await question('App ID: ');
  const measurementId = await question('Measurement ID (optional, press Enter to skip): ');
  
  const envContent = `# Firebase Configuration for Bigpenger@gmail.com
# Generated by setup-firebase.js on ${new Date().toISOString()}

NEXT_PUBLIC_FIREBASE_API_KEY=${apiKey}
NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=${authDomain}
NEXT_PUBLIC_FIREBASE_PROJECT_ID=${projectId}
NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=${storageBucket}
NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=${messagingSenderId}
NEXT_PUBLIC_FIREBASE_APP_ID=${appId}
${measurementId ? `NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID=${measurementId}` : '# NEXT_PUBLIC_FIREBASE_MEASUREMENT_ID='}

# Service Account Path (for seeding script)
# Download from: Firebase Console > Project Settings > Service Accounts > Generate new private key
FIREBASE_SERVICE_ACCOUNT_PATH=./firebase-service-account.json
`;

  const envPath = path.join(process.cwd(), '.env.local');
  
  if (fs.existsSync(envPath)) {
    const overwrite = await question('\n⚠️  .env.local already exists. Overwrite? (yes/no): ');
    if (overwrite.toLowerCase() !== 'yes' && overwrite.toLowerCase() !== 'y') {
      console.log('\nSkipping .env.local creation. Your existing file was not modified.');
      rl.close();
      return;
    }
  }
  
  fs.writeFileSync(envPath, envContent);
  console.log('\n✅ Created .env.local file!\n');
  
  console.log('Next steps:\n');
  console.log('1. Download your Firebase service account key:');
  console.log('   Firebase Console > Project Settings > Service Accounts > Generate new private key');
  console.log('   Save it as: firebase-service-account.json\n');
  
  console.log('2. Deploy Firestore security rules:');
  console.log('   firebase login');
  console.log('   firebase init firestore');
  console.log('   firebase deploy --only firestore:rules,firestore:indexes\n');
  
  console.log('3. Seed your content:');
  console.log('   npm run seed\n');
  
  console.log('4. Start your dev server:');
  console.log('   npm run dev\n');
  
  console.log('📖 For detailed instructions, see: CONTENT_SEEDING_GUIDE.md\n');
  
  rl.close();
}

main().catch(console.error);

